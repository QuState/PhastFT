<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="78798"><g><title>__perf_event_task_sched_in (129 samples, 0.16%)</title><rect x="0.1485%" y="453" width="0.1637%" height="15" fill="rgb(227,0,7)" fg:x="117" fg:w="129"/><text x="0.3985%" y="463.50"></text></g><g><title>_raw_spin_unlock (49 samples, 0.06%)</title><rect x="0.2500%" y="437" width="0.0622%" height="15" fill="rgb(217,0,24)" fg:x="197" fg:w="49"/><text x="0.5000%" y="447.50"></text></g><g><title>schedule_tail (243 samples, 0.31%)</title><rect x="0.0241%" y="485" width="0.3084%" height="15" fill="rgb(221,193,54)" fg:x="19" fg:w="243"/><text x="0.2741%" y="495.50"></text></g><g><title>finish_task_switch.isra.0 (237 samples, 0.30%)</title><rect x="0.0317%" y="469" width="0.3008%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="237"/><text x="0.2817%" y="479.50"></text></g><g><title>[[heap]] (262 samples, 0.33%)</title><rect x="0.0063%" y="533" width="0.3325%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="262"/><text x="0.2563%" y="543.50"></text></g><g><title>[libc.so.6] (262 samples, 0.33%)</title><rect x="0.0063%" y="517" width="0.3325%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="262"/><text x="0.2563%" y="527.50"></text></g><g><title>ret_from_fork (255 samples, 0.32%)</title><rect x="0.0152%" y="501" width="0.3236%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="255"/><text x="0.2652%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (80 samples, 0.10%)</title><rect x="1.3033%" y="293" width="0.1015%" height="15" fill="rgb(228,23,34)" fg:x="1027" fg:w="80"/><text x="1.5533%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (80 samples, 0.10%)</title><rect x="1.3033%" y="277" width="0.1015%" height="15" fill="rgb(218,30,26)" fg:x="1027" fg:w="80"/><text x="1.5533%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (32 samples, 0.04%)</title><rect x="1.3642%" y="261" width="0.0406%" height="15" fill="rgb(220,122,19)" fg:x="1075" fg:w="32"/><text x="1.6142%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::reverse_bits (2,454 samples, 3.11%)</title><rect x="1.4049%" y="293" width="3.1143%" height="15" fill="rgb(250,228,42)" fg:x="1107" fg:w="2454"/><text x="1.6549%" y="303.50">cor..</text></g><g><title>scheduler_tick (13 samples, 0.02%)</title><rect x="68.2416%" y="117" width="0.0165%" height="15" fill="rgb(240,193,28)" fg:x="53773" fg:w="13"/><text x="68.4916%" y="127.50"></text></g><g><title>task_tick_fair (12 samples, 0.02%)</title><rect x="68.2428%" y="101" width="0.0152%" height="15" fill="rgb(216,20,37)" fg:x="53774" fg:w="12"/><text x="68.4928%" y="111.50"></text></g><g><title>__hrtimer_run_queues (20 samples, 0.03%)</title><rect x="68.2340%" y="181" width="0.0254%" height="15" fill="rgb(206,188,39)" fg:x="53767" fg:w="20"/><text x="68.4840%" y="191.50"></text></g><g><title>tick_sched_timer (18 samples, 0.02%)</title><rect x="68.2365%" y="165" width="0.0228%" height="15" fill="rgb(217,207,13)" fg:x="53769" fg:w="18"/><text x="68.4865%" y="175.50"></text></g><g><title>tick_sched_handle (17 samples, 0.02%)</title><rect x="68.2378%" y="149" width="0.0216%" height="15" fill="rgb(231,73,38)" fg:x="53770" fg:w="17"/><text x="68.4878%" y="159.50"></text></g><g><title>update_process_times (17 samples, 0.02%)</title><rect x="68.2378%" y="133" width="0.0216%" height="15" fill="rgb(225,20,46)" fg:x="53770" fg:w="17"/><text x="68.4878%" y="143.50"></text></g><g><title>__sysvec_apic_timer_interrupt (21 samples, 0.03%)</title><rect x="68.2340%" y="213" width="0.0267%" height="15" fill="rgb(210,31,41)" fg:x="53767" fg:w="21"/><text x="68.4840%" y="223.50"></text></g><g><title>hrtimer_interrupt (21 samples, 0.03%)</title><rect x="68.2340%" y="197" width="0.0267%" height="15" fill="rgb(221,200,47)" fg:x="53767" fg:w="21"/><text x="68.4840%" y="207.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (27 samples, 0.03%)</title><rect x="68.2276%" y="245" width="0.0343%" height="15" fill="rgb(226,26,5)" fg:x="53762" fg:w="27"/><text x="68.4776%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (22 samples, 0.03%)</title><rect x="68.2340%" y="229" width="0.0279%" height="15" fill="rgb(249,33,26)" fg:x="53767" fg:w="22"/><text x="68.4840%" y="239.50"></text></g><g><title>core::intrinsics::copy (50,205 samples, 63.71%)</title><rect x="4.5496%" y="261" width="63.7135%" height="15" fill="rgb(235,183,28)" fg:x="3585" fg:w="50205"/><text x="4.7996%" y="271.50">core::intrinsics::copy</text></g><g><title>std::panic::catch_unwind (53,539 samples, 67.94%)</title><rect x="0.3503%" y="421" width="67.9446%" height="15" fill="rgb(221,5,38)" fg:x="276" fg:w="53539"/><text x="0.6003%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (53,539 samples, 67.94%)</title><rect x="0.3503%" y="405" width="67.9446%" height="15" fill="rgb(247,18,42)" fg:x="276" fg:w="53539"/><text x="0.6003%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (53,539 samples, 67.94%)</title><rect x="0.3503%" y="389" width="67.9446%" height="15" fill="rgb(241,131,45)" fg:x="276" fg:w="53539"/><text x="0.6003%" y="399.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (53,539 samples, 67.94%)</title><rect x="0.3503%" y="373" width="67.9446%" height="15" fill="rgb(249,31,29)" fg:x="276" fg:w="53539"/><text x="0.6003%" y="383.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (53,539 samples, 67.94%)</title><rect x="0.3503%" y="357" width="67.9446%" height="15" fill="rgb(225,111,53)" fg:x="276" fg:w="53539"/><text x="0.6003%" y="367.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (53,539 samples, 67.94%)</title><rect x="0.3503%" y="341" width="67.9446%" height="15" fill="rgb(238,160,17)" fg:x="276" fg:w="53539"/><text x="0.6003%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>phastft::bit_reverse_permute_state_par::{{closure}}::{{closure}} (53,539 samples, 67.94%)</title><rect x="0.3503%" y="325" width="67.9446%" height="15" fill="rgb(214,148,48)" fg:x="276" fg:w="53539"/><text x="0.6003%" y="335.50">phastft::bit_reverse_permute_state_par::{{closure}}::{{closure}}</text></g><g><title>phastft::br_perm (53,539 samples, 67.94%)</title><rect x="0.3503%" y="309" width="67.9446%" height="15" fill="rgb(232,36,49)" fg:x="276" fg:w="53539"/><text x="0.6003%" y="319.50">phastft::br_perm</text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (50,254 samples, 63.78%)</title><rect x="4.5192%" y="293" width="63.7757%" height="15" fill="rgb(209,103,24)" fg:x="3561" fg:w="50254"/><text x="4.7692%" y="303.50">core::slice::&lt;impl [T]&gt;::swap</text></g><g><title>core::ptr::swap (50,230 samples, 63.75%)</title><rect x="4.5496%" y="277" width="63.7453%" height="15" fill="rgb(229,88,8)" fg:x="3585" fg:w="50230"/><text x="4.7996%" y="287.50">core::ptr::swap</text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.03%)</title><rect x="68.2632%" y="261" width="0.0317%" height="15" fill="rgb(213,181,19)" fg:x="53790" fg:w="25"/><text x="68.5132%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (53,541 samples, 67.95%)</title><rect x="0.3490%" y="485" width="67.9472%" height="15" fill="rgb(254,191,54)" fg:x="275" fg:w="53541"/><text x="0.5990%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (53,541 samples, 67.95%)</title><rect x="0.3490%" y="469" width="67.9472%" height="15" fill="rgb(241,83,37)" fg:x="275" fg:w="53541"/><text x="0.5990%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (53,541 samples, 67.95%)</title><rect x="0.3490%" y="453" width="67.9472%" height="15" fill="rgb(233,36,39)" fg:x="275" fg:w="53541"/><text x="0.5990%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (53,541 samples, 67.95%)</title><rect x="0.3490%" y="437" width="67.9472%" height="15" fill="rgb(226,3,54)" fg:x="275" fg:w="53541"/><text x="0.5990%" y="447.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>do_mmap (11 samples, 0.01%)</title><rect x="68.2974%" y="357" width="0.0140%" height="15" fill="rgb(245,192,40)" fg:x="53817" fg:w="11"/><text x="68.5474%" y="367.50"></text></g><g><title>__mmap (13 samples, 0.02%)</title><rect x="68.2974%" y="421" width="0.0165%" height="15" fill="rgb(238,167,29)" fg:x="53817" fg:w="13"/><text x="68.5474%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (13 samples, 0.02%)</title><rect x="68.2974%" y="405" width="0.0165%" height="15" fill="rgb(232,182,51)" fg:x="53817" fg:w="13"/><text x="68.5474%" y="415.50"></text></g><g><title>do_syscall_64 (13 samples, 0.02%)</title><rect x="68.2974%" y="389" width="0.0165%" height="15" fill="rgb(231,60,39)" fg:x="53817" fg:w="13"/><text x="68.5474%" y="399.50"></text></g><g><title>vm_mmap_pgoff (13 samples, 0.02%)</title><rect x="68.2974%" y="373" width="0.0165%" height="15" fill="rgb(208,69,12)" fg:x="53817" fg:w="13"/><text x="68.5474%" y="383.50"></text></g><g><title>[libc.so.6] (53,570 samples, 67.98%)</title><rect x="0.3401%" y="517" width="67.9840%" height="15" fill="rgb(235,93,37)" fg:x="268" fg:w="53570"/><text x="0.5901%" y="527.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (53,563 samples, 67.98%)</title><rect x="0.3490%" y="501" width="67.9751%" height="15" fill="rgb(213,116,39)" fg:x="275" fg:w="53563"/><text x="0.5990%" y="511.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (21 samples, 0.03%)</title><rect x="68.2974%" y="485" width="0.0267%" height="15" fill="rgb(222,207,29)" fg:x="53817" fg:w="21"/><text x="68.5474%" y="495.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (21 samples, 0.03%)</title><rect x="68.2974%" y="469" width="0.0267%" height="15" fill="rgb(206,96,30)" fg:x="53817" fg:w="21"/><text x="68.5474%" y="479.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (21 samples, 0.03%)</title><rect x="68.2974%" y="453" width="0.0267%" height="15" fill="rgb(218,138,4)" fg:x="53817" fg:w="21"/><text x="68.5474%" y="463.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (21 samples, 0.03%)</title><rect x="68.2974%" y="437" width="0.0267%" height="15" fill="rgb(250,191,14)" fg:x="53817" fg:w="21"/><text x="68.5474%" y="447.50"></text></g><g><title>[libc.so.6] (53,571 samples, 67.99%)</title><rect x="0.3401%" y="533" width="67.9852%" height="15" fill="rgb(239,60,40)" fg:x="268" fg:w="53571"/><text x="0.5901%" y="543.50">[libc.so.6]</text></g><g><title>clear_huge_page (308 samples, 0.39%)</title><rect x="68.4802%" y="101" width="0.3909%" height="15" fill="rgb(206,27,48)" fg:x="53961" fg:w="308"/><text x="68.7302%" y="111.50"></text></g><g><title>clear_page_erms (303 samples, 0.38%)</title><rect x="68.4865%" y="85" width="0.3845%" height="15" fill="rgb(225,35,8)" fg:x="53966" fg:w="303"/><text x="68.7365%" y="95.50"></text></g><g><title>pte_alloc_one (9 samples, 0.01%)</title><rect x="68.8736%" y="101" width="0.0114%" height="15" fill="rgb(250,213,24)" fg:x="54271" fg:w="9"/><text x="69.1236%" y="111.50"></text></g><g><title>__alloc_pages (9 samples, 0.01%)</title><rect x="68.8736%" y="85" width="0.0114%" height="15" fill="rgb(247,123,22)" fg:x="54271" fg:w="9"/><text x="69.1236%" y="95.50"></text></g><g><title>clear_page_erms (465 samples, 0.59%)</title><rect x="68.8977%" y="37" width="0.5901%" height="15" fill="rgb(231,138,38)" fg:x="54290" fg:w="465"/><text x="69.1477%" y="47.50"></text></g><g><title>do_huge_pmd_anonymous_page (805 samples, 1.02%)</title><rect x="68.4751%" y="117" width="1.0216%" height="15" fill="rgb(231,145,46)" fg:x="53957" fg:w="805"/><text x="68.7251%" y="127.50"></text></g><g><title>vma_alloc_folio (482 samples, 0.61%)</title><rect x="68.8850%" y="101" width="0.6117%" height="15" fill="rgb(251,118,11)" fg:x="54280" fg:w="482"/><text x="69.1350%" y="111.50"></text></g><g><title>__folio_alloc (482 samples, 0.61%)</title><rect x="68.8850%" y="85" width="0.6117%" height="15" fill="rgb(217,147,25)" fg:x="54280" fg:w="482"/><text x="69.1350%" y="95.50"></text></g><g><title>__alloc_pages (482 samples, 0.61%)</title><rect x="68.8850%" y="69" width="0.6117%" height="15" fill="rgb(247,81,37)" fg:x="54280" fg:w="482"/><text x="69.1350%" y="79.50"></text></g><g><title>get_page_from_freelist (481 samples, 0.61%)</title><rect x="68.8863%" y="53" width="0.6104%" height="15" fill="rgb(209,12,38)" fg:x="54281" fg:w="481"/><text x="69.1363%" y="63.50"></text></g><g><title>handle_mm_fault (808 samples, 1.03%)</title><rect x="68.4738%" y="149" width="1.0254%" height="15" fill="rgb(227,1,9)" fg:x="53956" fg:w="808"/><text x="68.7238%" y="159.50"></text></g><g><title>__handle_mm_fault (808 samples, 1.03%)</title><rect x="68.4738%" y="133" width="1.0254%" height="15" fill="rgb(248,47,43)" fg:x="53956" fg:w="808"/><text x="68.7238%" y="143.50"></text></g><g><title>asm_exc_page_fault (809 samples, 1.03%)</title><rect x="68.4738%" y="197" width="1.0267%" height="15" fill="rgb(221,10,30)" fg:x="53956" fg:w="809"/><text x="68.7238%" y="207.50"></text></g><g><title>exc_page_fault (809 samples, 1.03%)</title><rect x="68.4738%" y="181" width="1.0267%" height="15" fill="rgb(210,229,1)" fg:x="53956" fg:w="809"/><text x="68.7238%" y="191.50"></text></g><g><title>do_user_addr_fault (809 samples, 1.03%)</title><rect x="68.4738%" y="165" width="1.0267%" height="15" fill="rgb(222,148,37)" fg:x="53956" fg:w="809"/><text x="68.7238%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (856 samples, 1.09%)</title><rect x="68.4154%" y="245" width="1.0863%" height="15" fill="rgb(234,67,33)" fg:x="53910" fg:w="856"/><text x="68.6654%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (856 samples, 1.09%)</title><rect x="68.4154%" y="229" width="1.0863%" height="15" fill="rgb(247,98,35)" fg:x="53910" fg:w="856"/><text x="68.6654%" y="239.50"></text></g><g><title>core::ptr::write (856 samples, 1.09%)</title><rect x="68.4154%" y="213" width="1.0863%" height="15" fill="rgb(247,138,52)" fg:x="53910" fg:w="856"/><text x="68.6654%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (945 samples, 1.20%)</title><rect x="68.3253%" y="341" width="1.1993%" height="15" fill="rgb(213,79,30)" fg:x="53839" fg:w="945"/><text x="68.5753%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (945 samples, 1.20%)</title><rect x="68.3253%" y="325" width="1.1993%" height="15" fill="rgb(246,177,23)" fg:x="53839" fg:w="945"/><text x="68.5753%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (945 samples, 1.20%)</title><rect x="68.3253%" y="309" width="1.1993%" height="15" fill="rgb(230,62,27)" fg:x="53839" fg:w="945"/><text x="68.5753%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (945 samples, 1.20%)</title><rect x="68.3253%" y="293" width="1.1993%" height="15" fill="rgb(216,154,8)" fg:x="53839" fg:w="945"/><text x="68.5753%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (945 samples, 1.20%)</title><rect x="68.3253%" y="277" width="1.1993%" height="15" fill="rgb(244,35,45)" fg:x="53839" fg:w="945"/><text x="68.5753%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (874 samples, 1.11%)</title><rect x="68.4154%" y="261" width="1.1092%" height="15" fill="rgb(251,115,12)" fg:x="53910" fg:w="874"/><text x="68.6654%" y="271.50"></text></g><g><title>phastft::bm_fft::{{closure}} (18 samples, 0.02%)</title><rect x="69.5018%" y="245" width="0.0228%" height="15" fill="rgb(240,54,50)" fg:x="54766" fg:w="18"/><text x="69.7518%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (946 samples, 1.20%)</title><rect x="68.3253%" y="405" width="1.2005%" height="15" fill="rgb(233,84,52)" fg:x="53839" fg:w="946"/><text x="68.5753%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (946 samples, 1.20%)</title><rect x="68.3253%" y="389" width="1.2005%" height="15" fill="rgb(207,117,47)" fg:x="53839" fg:w="946"/><text x="68.5753%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (946 samples, 1.20%)</title><rect x="68.3253%" y="373" width="1.2005%" height="15" fill="rgb(249,43,39)" fg:x="53839" fg:w="946"/><text x="68.5753%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (946 samples, 1.20%)</title><rect x="68.3253%" y="357" width="1.2005%" height="15" fill="rgb(209,38,44)" fg:x="53839" fg:w="946"/><text x="68.5753%" y="367.50"></text></g><g><title>tlb_finish_mmu (12 samples, 0.02%)</title><rect x="69.5259%" y="133" width="0.0152%" height="15" fill="rgb(236,212,23)" fg:x="54785" fg:w="12"/><text x="69.7759%" y="143.50"></text></g><g><title>tlb_batch_pages_flush (12 samples, 0.02%)</title><rect x="69.5259%" y="117" width="0.0152%" height="15" fill="rgb(242,79,21)" fg:x="54785" fg:w="12"/><text x="69.7759%" y="127.50"></text></g><g><title>release_pages (12 samples, 0.02%)</title><rect x="69.5259%" y="101" width="0.0152%" height="15" fill="rgb(211,96,35)" fg:x="54785" fg:w="12"/><text x="69.7759%" y="111.50"></text></g><g><title>free_unref_page (11 samples, 0.01%)</title><rect x="69.5271%" y="85" width="0.0140%" height="15" fill="rgb(253,215,40)" fg:x="54786" fg:w="11"/><text x="69.7771%" y="95.50"></text></g><g><title>free_pcp_prepare (10 samples, 0.01%)</title><rect x="69.5284%" y="69" width="0.0127%" height="15" fill="rgb(211,81,21)" fg:x="54787" fg:w="10"/><text x="69.7784%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;spinoza::core::State&gt; (14 samples, 0.02%)</title><rect x="69.5259%" y="405" width="0.0178%" height="15" fill="rgb(208,190,38)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (14 samples, 0.02%)</title><rect x="69.5259%" y="389" width="0.0178%" height="15" fill="rgb(235,213,38)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (14 samples, 0.02%)</title><rect x="69.5259%" y="373" width="0.0178%" height="15" fill="rgb(237,122,38)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="69.5259%" y="357" width="0.0178%" height="15" fill="rgb(244,218,35)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.02%)</title><rect x="69.5259%" y="341" width="0.0178%" height="15" fill="rgb(240,68,47)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.02%)</title><rect x="69.5259%" y="325" width="0.0178%" height="15" fill="rgb(210,16,53)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="335.50"></text></g><g><title>__rdl_dealloc (14 samples, 0.02%)</title><rect x="69.5259%" y="309" width="0.0178%" height="15" fill="rgb(235,124,12)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.02%)</title><rect x="69.5259%" y="293" width="0.0178%" height="15" fill="rgb(224,169,11)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="303.50"></text></g><g><title>__libc_free (14 samples, 0.02%)</title><rect x="69.5259%" y="277" width="0.0178%" height="15" fill="rgb(250,166,2)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="287.50"></text></g><g><title>__munmap (14 samples, 0.02%)</title><rect x="69.5259%" y="261" width="0.0178%" height="15" fill="rgb(242,216,29)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.02%)</title><rect x="69.5259%" y="245" width="0.0178%" height="15" fill="rgb(230,116,27)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="255.50"></text></g><g><title>do_syscall_64 (14 samples, 0.02%)</title><rect x="69.5259%" y="229" width="0.0178%" height="15" fill="rgb(228,99,48)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="239.50"></text></g><g><title>__x64_sys_munmap (14 samples, 0.02%)</title><rect x="69.5259%" y="213" width="0.0178%" height="15" fill="rgb(253,11,6)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="223.50"></text></g><g><title>__vm_munmap (14 samples, 0.02%)</title><rect x="69.5259%" y="197" width="0.0178%" height="15" fill="rgb(247,143,39)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="207.50"></text></g><g><title>do_mas_munmap (14 samples, 0.02%)</title><rect x="69.5259%" y="181" width="0.0178%" height="15" fill="rgb(236,97,10)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="191.50"></text></g><g><title>do_mas_align_munmap (14 samples, 0.02%)</title><rect x="69.5259%" y="165" width="0.0178%" height="15" fill="rgb(233,208,19)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="175.50"></text></g><g><title>unmap_region (14 samples, 0.02%)</title><rect x="69.5259%" y="149" width="0.0178%" height="15" fill="rgb(216,164,2)" fg:x="54785" fg:w="14"/><text x="69.7759%" y="159.50"></text></g><g><title>clear_huge_page (155 samples, 0.20%)</title><rect x="73.7519%" y="197" width="0.1967%" height="15" fill="rgb(220,129,5)" fg:x="58115" fg:w="155"/><text x="74.0019%" y="207.50"></text></g><g><title>clear_page_erms (154 samples, 0.20%)</title><rect x="73.7531%" y="181" width="0.1954%" height="15" fill="rgb(242,17,10)" fg:x="58116" fg:w="154"/><text x="74.0031%" y="191.50"></text></g><g><title>clear_page_erms (230 samples, 0.29%)</title><rect x="73.9663%" y="133" width="0.2919%" height="15" fill="rgb(242,107,0)" fg:x="58284" fg:w="230"/><text x="74.2163%" y="143.50"></text></g><g><title>do_huge_pmd_anonymous_page (404 samples, 0.51%)</title><rect x="73.7493%" y="213" width="0.5127%" height="15" fill="rgb(251,28,31)" fg:x="58113" fg:w="404"/><text x="73.9993%" y="223.50"></text></g><g><title>vma_alloc_folio (244 samples, 0.31%)</title><rect x="73.9524%" y="197" width="0.3097%" height="15" fill="rgb(233,223,10)" fg:x="58273" fg:w="244"/><text x="74.2024%" y="207.50"></text></g><g><title>__folio_alloc (244 samples, 0.31%)</title><rect x="73.9524%" y="181" width="0.3097%" height="15" fill="rgb(215,21,27)" fg:x="58273" fg:w="244"/><text x="74.2024%" y="191.50"></text></g><g><title>__alloc_pages (244 samples, 0.31%)</title><rect x="73.9524%" y="165" width="0.3097%" height="15" fill="rgb(232,23,21)" fg:x="58273" fg:w="244"/><text x="74.2024%" y="175.50"></text></g><g><title>get_page_from_freelist (244 samples, 0.31%)</title><rect x="73.9524%" y="149" width="0.3097%" height="15" fill="rgb(244,5,23)" fg:x="58273" fg:w="244"/><text x="74.2024%" y="159.50"></text></g><g><title>asm_exc_page_fault (408 samples, 0.52%)</title><rect x="73.7468%" y="293" width="0.5178%" height="15" fill="rgb(226,81,46)" fg:x="58111" fg:w="408"/><text x="73.9968%" y="303.50"></text></g><g><title>exc_page_fault (408 samples, 0.52%)</title><rect x="73.7468%" y="277" width="0.5178%" height="15" fill="rgb(247,70,30)" fg:x="58111" fg:w="408"/><text x="73.9968%" y="287.50"></text></g><g><title>do_user_addr_fault (408 samples, 0.52%)</title><rect x="73.7468%" y="261" width="0.5178%" height="15" fill="rgb(212,68,19)" fg:x="58111" fg:w="408"/><text x="73.9968%" y="271.50"></text></g><g><title>handle_mm_fault (408 samples, 0.52%)</title><rect x="73.7468%" y="245" width="0.5178%" height="15" fill="rgb(240,187,13)" fg:x="58111" fg:w="408"/><text x="73.9968%" y="255.50"></text></g><g><title>__handle_mm_fault (407 samples, 0.52%)</title><rect x="73.7481%" y="229" width="0.5165%" height="15" fill="rgb(223,113,26)" fg:x="58112" fg:w="407"/><text x="73.9981%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,458 samples, 1.85%)</title><rect x="72.4155%" y="325" width="1.8503%" height="15" fill="rgb(206,192,2)" fg:x="57062" fg:w="1458"/><text x="72.6655%" y="335.50">a..</text></g><g><title>core::ptr::write (662 samples, 0.84%)</title><rect x="73.4257%" y="309" width="0.8401%" height="15" fill="rgb(241,108,4)" fg:x="57858" fg:w="662"/><text x="73.6757%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,722 samples, 4.72%)</title><rect x="69.5436%" y="389" width="4.7235%" height="15" fill="rgb(247,173,49)" fg:x="54799" fg:w="3722"/><text x="69.7936%" y="399.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,722 samples, 4.72%)</title><rect x="69.5436%" y="373" width="4.7235%" height="15" fill="rgb(224,114,35)" fg:x="54799" fg:w="3722"/><text x="69.7936%" y="383.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3,721 samples, 4.72%)</title><rect x="69.5449%" y="357" width="4.7222%" height="15" fill="rgb(245,159,27)" fg:x="54800" fg:w="3721"/><text x="69.7949%" y="367.50">core::..</text></g><g><title>phastft::fft_dif::{{closure}} (3,721 samples, 4.72%)</title><rect x="69.5449%" y="341" width="4.7222%" height="15" fill="rgb(245,172,44)" fg:x="54800" fg:w="3721"/><text x="69.7949%" y="351.50">phastf..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (9 samples, 0.01%)</title><rect x="74.2671%" y="389" width="0.0114%" height="15" fill="rgb(236,23,11)" fg:x="58521" fg:w="9"/><text x="74.5171%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (9 samples, 0.01%)</title><rect x="74.2671%" y="373" width="0.0114%" height="15" fill="rgb(205,117,38)" fg:x="58521" fg:w="9"/><text x="74.5171%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="74.2671%" y="357" width="0.0114%" height="15" fill="rgb(237,72,25)" fg:x="58521" fg:w="9"/><text x="74.5171%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.01%)</title><rect x="74.2671%" y="341" width="0.0114%" height="15" fill="rgb(244,70,9)" fg:x="58521" fg:w="9"/><text x="74.5171%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.01%)</title><rect x="74.2671%" y="325" width="0.0114%" height="15" fill="rgb(217,125,39)" fg:x="58521" fg:w="9"/><text x="74.5171%" y="335.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.01%)</title><rect x="74.2671%" y="309" width="0.0114%" height="15" fill="rgb(235,36,10)" fg:x="58521" fg:w="9"/><text x="74.5171%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.01%)</title><rect x="74.2671%" y="293" width="0.0114%" height="15" fill="rgb(251,123,47)" fg:x="58521" fg:w="9"/><text x="74.5171%" y="303.50"></text></g><g><title>__libc_free (9 samples, 0.01%)</title><rect x="74.2671%" y="277" width="0.0114%" height="15" fill="rgb(221,13,13)" fg:x="58521" fg:w="9"/><text x="74.5171%" y="287.50"></text></g><g><title>__munmap (8 samples, 0.01%)</title><rect x="74.2684%" y="261" width="0.0102%" height="15" fill="rgb(238,131,9)" fg:x="58522" fg:w="8"/><text x="74.5184%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.01%)</title><rect x="74.2684%" y="245" width="0.0102%" height="15" fill="rgb(211,50,8)" fg:x="58522" fg:w="8"/><text x="74.5184%" y="255.50"></text></g><g><title>do_syscall_64 (8 samples, 0.01%)</title><rect x="74.2684%" y="229" width="0.0102%" height="15" fill="rgb(245,182,24)" fg:x="58522" fg:w="8"/><text x="74.5184%" y="239.50"></text></g><g><title>__x64_sys_munmap (8 samples, 0.01%)</title><rect x="74.2684%" y="213" width="0.0102%" height="15" fill="rgb(242,14,37)" fg:x="58522" fg:w="8"/><text x="74.5184%" y="223.50"></text></g><g><title>__vm_munmap (8 samples, 0.01%)</title><rect x="74.2684%" y="197" width="0.0102%" height="15" fill="rgb(246,228,12)" fg:x="58522" fg:w="8"/><text x="74.5184%" y="207.50"></text></g><g><title>do_mas_munmap (8 samples, 0.01%)</title><rect x="74.2684%" y="181" width="0.0102%" height="15" fill="rgb(213,55,15)" fg:x="58522" fg:w="8"/><text x="74.5184%" y="191.50"></text></g><g><title>do_mas_align_munmap (8 samples, 0.01%)</title><rect x="74.2684%" y="165" width="0.0102%" height="15" fill="rgb(209,9,3)" fg:x="58522" fg:w="8"/><text x="74.5184%" y="175.50"></text></g><g><title>unmap_region (8 samples, 0.01%)</title><rect x="74.2684%" y="149" width="0.0102%" height="15" fill="rgb(230,59,30)" fg:x="58522" fg:w="8"/><text x="74.5184%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (324 samples, 0.41%)</title><rect x="74.2785%" y="325" width="0.4112%" height="15" fill="rgb(209,121,21)" fg:x="58530" fg:w="324"/><text x="74.5285%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (324 samples, 0.41%)</title><rect x="74.2785%" y="309" width="0.4112%" height="15" fill="rgb(220,109,13)" fg:x="58530" fg:w="324"/><text x="74.5285%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (324 samples, 0.41%)</title><rect x="74.2785%" y="293" width="0.4112%" height="15" fill="rgb(232,18,1)" fg:x="58530" fg:w="324"/><text x="74.5285%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (324 samples, 0.41%)</title><rect x="74.2785%" y="277" width="0.4112%" height="15" fill="rgb(215,41,42)" fg:x="58530" fg:w="324"/><text x="74.5285%" y="287.50"></text></g><g><title>phastft::fft_chunk_2 (632 samples, 0.80%)</title><rect x="74.2785%" y="389" width="0.8021%" height="15" fill="rgb(224,123,36)" fg:x="58530" fg:w="632"/><text x="74.5285%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (632 samples, 0.80%)</title><rect x="74.2785%" y="373" width="0.8021%" height="15" fill="rgb(240,125,3)" fg:x="58530" fg:w="632"/><text x="74.5285%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (632 samples, 0.80%)</title><rect x="74.2785%" y="357" width="0.8021%" height="15" fill="rgb(205,98,50)" fg:x="58530" fg:w="632"/><text x="74.5285%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (632 samples, 0.80%)</title><rect x="74.2785%" y="341" width="0.8021%" height="15" fill="rgb(205,185,37)" fg:x="58530" fg:w="632"/><text x="74.5285%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (308 samples, 0.39%)</title><rect x="74.6897%" y="325" width="0.3909%" height="15" fill="rgb(238,207,15)" fg:x="58854" fg:w="308"/><text x="74.9397%" y="335.50"></text></g><g><title>phastft::fft_chunk_2::{{closure}} (308 samples, 0.39%)</title><rect x="74.6897%" y="309" width="0.3909%" height="15" fill="rgb(213,199,42)" fg:x="58854" fg:w="308"/><text x="74.9397%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (308 samples, 0.39%)</title><rect x="74.6897%" y="293" width="0.3909%" height="15" fill="rgb(235,201,11)" fg:x="58854" fg:w="308"/><text x="74.9397%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (308 samples, 0.39%)</title><rect x="74.6897%" y="277" width="0.3909%" height="15" fill="rgb(207,46,11)" fg:x="58854" fg:w="308"/><text x="74.9397%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (308 samples, 0.39%)</title><rect x="74.6897%" y="261" width="0.3909%" height="15" fill="rgb(241,35,35)" fg:x="58854" fg:w="308"/><text x="74.9397%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (308 samples, 0.39%)</title><rect x="74.6897%" y="245" width="0.3909%" height="15" fill="rgb(243,32,47)" fg:x="58854" fg:w="308"/><text x="74.9397%" y="255.50"></text></g><g><title>phastft::fft_chunk_2::{{closure}}::{{closure}} (308 samples, 0.39%)</title><rect x="74.6897%" y="229" width="0.3909%" height="15" fill="rgb(247,202,23)" fg:x="58854" fg:w="308"/><text x="74.9397%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (212 samples, 0.27%)</title><rect x="75.0806%" y="325" width="0.2690%" height="15" fill="rgb(219,102,11)" fg:x="59162" fg:w="212"/><text x="75.3306%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (212 samples, 0.27%)</title><rect x="75.0806%" y="309" width="0.2690%" height="15" fill="rgb(243,110,44)" fg:x="59162" fg:w="212"/><text x="75.3306%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (212 samples, 0.27%)</title><rect x="75.0806%" y="293" width="0.2690%" height="15" fill="rgb(222,74,54)" fg:x="59162" fg:w="212"/><text x="75.3306%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (212 samples, 0.27%)</title><rect x="75.0806%" y="277" width="0.2690%" height="15" fill="rgb(216,99,12)" fg:x="59162" fg:w="212"/><text x="75.3306%" y="287.50"></text></g><g><title>phastft::fft_chunk_4 (672 samples, 0.85%)</title><rect x="75.0806%" y="389" width="0.8528%" height="15" fill="rgb(226,22,26)" fg:x="59162" fg:w="672"/><text x="75.3306%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (672 samples, 0.85%)</title><rect x="75.0806%" y="373" width="0.8528%" height="15" fill="rgb(217,163,10)" fg:x="59162" fg:w="672"/><text x="75.3306%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (672 samples, 0.85%)</title><rect x="75.0806%" y="357" width="0.8528%" height="15" fill="rgb(213,25,53)" fg:x="59162" fg:w="672"/><text x="75.3306%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (672 samples, 0.85%)</title><rect x="75.0806%" y="341" width="0.8528%" height="15" fill="rgb(252,105,26)" fg:x="59162" fg:w="672"/><text x="75.3306%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (460 samples, 0.58%)</title><rect x="75.3496%" y="325" width="0.5838%" height="15" fill="rgb(220,39,43)" fg:x="59374" fg:w="460"/><text x="75.5996%" y="335.50"></text></g><g><title>phastft::fft_chunk_4::{{closure}} (460 samples, 0.58%)</title><rect x="75.3496%" y="309" width="0.5838%" height="15" fill="rgb(229,68,48)" fg:x="59374" fg:w="460"/><text x="75.5996%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (27 samples, 0.03%)</title><rect x="75.9436%" y="325" width="0.0343%" height="15" fill="rgb(252,8,32)" fg:x="59842" fg:w="27"/><text x="76.1936%" y="335.50"></text></g><g><title>&lt;core::slice::iter::ChunksExactMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (27 samples, 0.03%)</title><rect x="75.9436%" y="309" width="0.0343%" height="15" fill="rgb(223,20,43)" fg:x="59842" fg:w="27"/><text x="76.1936%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (57 samples, 0.07%)</title><rect x="75.9778%" y="325" width="0.0723%" height="15" fill="rgb(229,81,49)" fg:x="59869" fg:w="57"/><text x="76.2278%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (57 samples, 0.07%)</title><rect x="75.9778%" y="309" width="0.0723%" height="15" fill="rgb(236,28,36)" fg:x="59869" fg:w="57"/><text x="76.2278%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2,923 samples, 3.71%)</title><rect x="76.4575%" y="213" width="3.7095%" height="15" fill="rgb(249,185,26)" fg:x="60247" fg:w="2923"/><text x="76.7075%" y="223.50">&lt;usi..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2,923 samples, 3.71%)</title><rect x="76.4575%" y="197" width="3.7095%" height="15" fill="rgb(249,174,33)" fg:x="60247" fg:w="2923"/><text x="76.7075%" y="207.50">core..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,579 samples, 4.54%)</title><rect x="76.0502%" y="245" width="4.5420%" height="15" fill="rgb(233,201,37)" fg:x="59926" fg:w="3579"/><text x="76.3002%" y="255.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,579 samples, 4.54%)</title><rect x="76.0502%" y="229" width="4.5420%" height="15" fill="rgb(221,78,26)" fg:x="59926" fg:w="3579"/><text x="76.3002%" y="239.50">&lt;core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (335 samples, 0.43%)</title><rect x="80.1670%" y="213" width="0.4251%" height="15" fill="rgb(250,127,30)" fg:x="63170" fg:w="335"/><text x="80.4170%" y="223.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1,693 samples, 2.15%)</title><rect x="97.8020%" y="197" width="2.1485%" height="15" fill="rgb(230,49,44)" fg:x="77066" fg:w="1693"/><text x="98.0520%" y="207.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Mul&lt;&amp;f64&gt;&gt;::mul (4,501 samples, 5.71%)</title><rect x="94.2397%" y="213" width="5.7121%" height="15" fill="rgb(229,67,23)" fg:x="74259" fg:w="4501"/><text x="94.4897%" y="223.50">&lt;f64 as..</text></g><g><title>tick_sched_timer (13 samples, 0.02%)</title><rect x="99.9530%" y="133" width="0.0165%" height="15" fill="rgb(249,83,47)" fg:x="78761" fg:w="13"/><text x="100.2030%" y="143.50"></text></g><g><title>tick_sched_handle (12 samples, 0.02%)</title><rect x="99.9543%" y="117" width="0.0152%" height="15" fill="rgb(215,43,3)" fg:x="78762" fg:w="12"/><text x="100.2043%" y="127.50"></text></g><g><title>update_process_times (12 samples, 0.02%)</title><rect x="99.9543%" y="101" width="0.0152%" height="15" fill="rgb(238,154,13)" fg:x="78762" fg:w="12"/><text x="100.2043%" y="111.50"></text></g><g><title>scheduler_tick (10 samples, 0.01%)</title><rect x="99.9569%" y="85" width="0.0127%" height="15" fill="rgb(219,56,2)" fg:x="78764" fg:w="10"/><text x="100.2069%" y="95.50"></text></g><g><title>__hrtimer_run_queues (14 samples, 0.02%)</title><rect x="99.9530%" y="149" width="0.0178%" height="15" fill="rgb(233,0,4)" fg:x="78761" fg:w="14"/><text x="100.2030%" y="159.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (16 samples, 0.02%)</title><rect x="99.9518%" y="213" width="0.0203%" height="15" fill="rgb(235,30,7)" fg:x="78760" fg:w="16"/><text x="100.2018%" y="223.50"></text></g><g><title>sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="99.9530%" y="197" width="0.0190%" height="15" fill="rgb(250,79,13)" fg:x="78761" fg:w="15"/><text x="100.2030%" y="207.50"></text></g><g><title>__sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="99.9530%" y="181" width="0.0190%" height="15" fill="rgb(211,146,34)" fg:x="78761" fg:w="15"/><text x="100.2030%" y="191.50"></text></g><g><title>hrtimer_interrupt (15 samples, 0.02%)</title><rect x="99.9530%" y="165" width="0.0190%" height="15" fill="rgb(228,22,38)" fg:x="78761" fg:w="15"/><text x="100.2030%" y="175.50"></text></g><g><title>_start (24,942 samples, 31.65%)</title><rect x="68.3253%" y="533" width="31.6531%" height="15" fill="rgb(235,168,5)" fg:x="53839" fg:w="24942"/><text x="68.5753%" y="543.50">_start</text></g><g><title>__libc_start_main (24,942 samples, 31.65%)</title><rect x="68.3253%" y="517" width="31.6531%" height="15" fill="rgb(221,155,16)" fg:x="53839" fg:w="24942"/><text x="68.5753%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (24,942 samples, 31.65%)</title><rect x="68.3253%" y="501" width="31.6531%" height="15" fill="rgb(215,215,53)" fg:x="53839" fg:w="24942"/><text x="68.5753%" y="511.50">[libc.so.6]</text></g><g><title>main (24,942 samples, 31.65%)</title><rect x="68.3253%" y="485" width="31.6531%" height="15" fill="rgb(223,4,10)" fg:x="53839" fg:w="24942"/><text x="68.5753%" y="495.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24,942 samples, 31.65%)</title><rect x="68.3253%" y="469" width="31.6531%" height="15" fill="rgb(234,103,6)" fg:x="53839" fg:w="24942"/><text x="68.5753%" y="479.50">std::sys_common::backtrace::__rust_begin_short_back..</text></g><g><title>core::ops::function::FnOnce::call_once (24,942 samples, 31.65%)</title><rect x="68.3253%" y="453" width="31.6531%" height="15" fill="rgb(227,97,0)" fg:x="53839" fg:w="24942"/><text x="68.5753%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>phastft::main (24,942 samples, 31.65%)</title><rect x="68.3253%" y="437" width="31.6531%" height="15" fill="rgb(234,150,53)" fg:x="53839" fg:w="24942"/><text x="68.5753%" y="447.50">phastft::main</text></g><g><title>phastft::bm_fft (24,942 samples, 31.65%)</title><rect x="68.3253%" y="421" width="31.6531%" height="15" fill="rgb(228,201,54)" fg:x="53839" fg:w="24942"/><text x="68.5753%" y="431.50">phastft::bm_fft</text></g><g><title>phastft::fft_dif (23,982 samples, 30.43%)</title><rect x="69.5436%" y="405" width="30.4348%" height="15" fill="rgb(222,22,37)" fg:x="54799" fg:w="23982"/><text x="69.7936%" y="415.50">phastft::fft_dif</text></g><g><title>phastft::fft_chunk_n (18,947 samples, 24.05%)</title><rect x="75.9334%" y="389" width="24.0450%" height="15" fill="rgb(237,53,32)" fg:x="59834" fg:w="18947"/><text x="76.1834%" y="399.50">phastft::fft_chunk_n</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18,947 samples, 24.05%)</title><rect x="75.9334%" y="373" width="24.0450%" height="15" fill="rgb(233,25,53)" fg:x="59834" fg:w="18947"/><text x="76.1834%" y="383.50">core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,947 samples, 24.05%)</title><rect x="75.9334%" y="357" width="24.0450%" height="15" fill="rgb(210,40,34)" fg:x="59834" fg:w="18947"/><text x="76.1834%" y="367.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; a..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (18,947 samples, 24.05%)</title><rect x="75.9334%" y="341" width="24.0450%" height="15" fill="rgb(241,220,44)" fg:x="59834" fg:w="18947"/><text x="76.1834%" y="351.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (18,855 samples, 23.93%)</title><rect x="76.0502%" y="325" width="23.9283%" height="15" fill="rgb(235,28,35)" fg:x="59926" fg:w="18855"/><text x="76.3002%" y="335.50">core::iter::traits::iterator::Iterator..</text></g><g><title>phastft::fft_chunk_n::{{closure}} (18,855 samples, 23.93%)</title><rect x="76.0502%" y="309" width="23.9283%" height="15" fill="rgb(210,56,17)" fg:x="59926" fg:w="18855"/><text x="76.3002%" y="319.50">phastft::fft_chunk_n::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18,855 samples, 23.93%)</title><rect x="76.0502%" y="293" width="23.9283%" height="15" fill="rgb(224,130,29)" fg:x="59926" fg:w="18855"/><text x="76.3002%" y="303.50">core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,855 samples, 23.93%)</title><rect x="76.0502%" y="277" width="23.9283%" height="15" fill="rgb(235,212,8)" fg:x="59926" fg:w="18855"/><text x="76.3002%" y="287.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; a..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (18,855 samples, 23.93%)</title><rect x="76.0502%" y="261" width="23.9283%" height="15" fill="rgb(223,33,50)" fg:x="59926" fg:w="18855"/><text x="76.3002%" y="271.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (15,276 samples, 19.39%)</title><rect x="80.5921%" y="245" width="19.3863%" height="15" fill="rgb(219,149,13)" fg:x="63505" fg:w="15276"/><text x="80.8421%" y="255.50">core::iter::traits::iterator::..</text></g><g><title>phastft::fft_chunk_n::{{closure}}::{{closure}} (15,276 samples, 19.39%)</title><rect x="80.5921%" y="229" width="19.3863%" height="15" fill="rgb(250,156,29)" fg:x="63505" fg:w="15276"/><text x="80.8421%" y="239.50">phastft::fft_chunk_n::{{closur..</text></g><g><title>all (78,798 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="78798"/><text x="0.2500%" y="575.50"></text></g><g><title>phastft (78,793 samples, 99.99%)</title><rect x="0.0063%" y="549" width="99.9937%" height="15" fill="rgb(216,135,14)" fg:x="5" fg:w="78793"/><text x="0.2563%" y="559.50">phastft</text></g><g><title>ret_from_fork (15 samples, 0.02%)</title><rect x="99.9810%" y="533" width="0.0190%" height="15" fill="rgb(241,47,5)" fg:x="78783" fg:w="15"/><text x="100.2310%" y="543.50"></text></g><g><title>schedule_tail (15 samples, 0.02%)</title><rect x="99.9810%" y="517" width="0.0190%" height="15" fill="rgb(233,42,35)" fg:x="78783" fg:w="15"/><text x="100.2310%" y="527.50"></text></g><g><title>finish_task_switch.isra.0 (15 samples, 0.02%)</title><rect x="99.9810%" y="501" width="0.0190%" height="15" fill="rgb(231,13,6)" fg:x="78783" fg:w="15"/><text x="100.2310%" y="511.50"></text></g><g><title>__perf_event_task_sched_in (15 samples, 0.02%)</title><rect x="99.9810%" y="485" width="0.0190%" height="15" fill="rgb(207,181,40)" fg:x="78783" fg:w="15"/><text x="100.2310%" y="495.50"></text></g><g><title>_raw_spin_unlock (10 samples, 0.01%)</title><rect x="99.9873%" y="469" width="0.0127%" height="15" fill="rgb(254,173,49)" fg:x="78788" fg:w="10"/><text x="100.2373%" y="479.50"></text></g></svg></svg>